--------------------------------------------------------------------------------------------
Day -1 : >> Introduction To Angular JS
	 
	>> Basic Angualr Application , Step By Step Configuration
	 		
			>> Angular Directives
	 		>> Angular Expressions
	 		>> Modules
	 		>> Controllers
	 		>> Two Way Data Binding

	 >> MVC Discussion

	 >> Applications Good Fit For Angular JS

	 >> Filters

	 >> Sample Applications To Work Upon.
--------------------------------------------------------------------------------------------
https://docs.angularjs.org/guide/introduction

What is Angular??

	>> AngularJS is a structural framework for dynamic web apps. It lets you use HTML as your template language and lets you extend HTML's syntax to express your application's components clearly and succinctly. 

	>> Angular's data binding and dependency injection eliminate much of the code you would  have to write. 

	>> And it all happens within the browser, making it an ideal partner with any server technology.

	>> Good For Creating Single Page Applications.


	>> The impedance mismatch between 
		Dynamic Applications And Static documents is often solved with

		>> Library	===> Example : JQuery

		>> Frame Works	===> Example : Angular JS, Spring, Struts 2.X etc..

	>> Angular takes another approach. It attempts to minimize the impedance mismatch between document centric HTML and what an application needs by creating new HTML constructs.

	>> Angular teaches the browser new syntax through a construct we call directives. 

	>> Examples include:

		Data binding, as in {{}}.

		DOM control structures for repeating, showing and hiding DOM fragments.

		Support for forms and form validation.

		Attaching new behavior to DOM elements, such as DOM event handling.

		Grouping of HTML into reusable components.


A Complete Client-Side Solution:
--------------------------------

	>> Angular simplifies application development by presenting a higher level of abstraction to the developer.

	>> Not every app is a good fit for Angular. 

	>> Angular was built with the CRUD application in mind. 

	>> Luckily CRUD applications represent the majority of web applications.

		Angular opinionated about how a CRUD (Create, Read, Update, Delete) application should be built. 

	>> Testability story: Unit-testing, end-to-end testing, mocks and test harnesses.

	>> Client Side MVC Application

	>> We Can Develope Loosely Coupled, And High Cohesive Applications.
	
	>> Desgin Principles:

		Loosely Coupled

		High Cohesive

Note:

Not Good Choice For Gaming Applications. Better to go for JQuery.


---------------------
The Zen of Angular:
---------------------

>> It is a very good idea to decouple DOM manipulation from app logic. This dramatically improves the testability of the code.

>> It is a really, really good idea to regard app testing as equal in importance to app writing. Testing difficulty is dramatically affected by the way the code is structured.

>> It is an excellent idea to decouple the client side of an app from the server side. 
	This allows development work to progress in parallel, 
	and allows for reuse of both sides.

>> It is very helpful indeed if the framework guides developers through the entire journey of building an app: From designing the UI, through writing the business logic, to testing.

>> It is always good to make common tasks trivial and difficult tasks possible.

--------------------------------------------
Angular frees you from the following pains:
--------------------------------------------

	>> Registering callbacks

	>> Manipulating HTML DOM programmatically

	>> Marshaling data to and from the UI

	>> Writing tons of initialization code just to get started

Example: Day- I Folder : angularJSExample1.html

	>> The important thing in the example is that Angular provides live bindings.
	
	>> When ever the input values changes the value of the expressions are automatically re caliculated and the DOM is updated with their values. The concept behind is Two Way Data Binding.

Directives:
-----------

Directives is a unique and powerful feature available only in Angular. 
Directives let you invent new HTML syntax, specific to your application.

 	>> ng-app
	>> ng-model
	>> ng-bind
	>> ng-controller
	>> ng-repeat
	etc..
 

Data Binding:
-------------

	>> Data-binding is an automatic way of updating the view whenever the model changes, as well as updating the model whenever the view changes.

	>> This is awesome because it eliminates DOM manipulation from the list of things you have to worry about.

	>> You Can Think of View is a Compiled DOM.

	>> The model is the single-source-of-truth for the application state, greatly simplifying the programming model for the developer.


Example : Day-I Folder: angularJSControllerExample1.html	

Controller:
-----------

>> The purpose of controllers is to expose variables and functionality to expressions and directives.

>> In Angular, a Controller is defined by a JavaScript constructor function that is used to augment the Angular Scope.

>> Use controllers to:

	>> Set up the initial state of the $scope object.

	>> Add behavior to the $scope object.

	>> Controllers should contain only business logic.

	>> Still Lot More..
		Asynchronous Calls etc..

$Scope:
---------

>> $scope is an object that refers to the application model.

>> It is an execution context for expressions.

>> scopes are arranged in hierarchical structure which mimic the DOM structure of the application.

>> Scopes can watch expressions and propagate events.

>> Scopes provide API's ($watch) to observe the Model Changes.

>> Scopes provide API's ($apply) to propagate any Model Changes through the system into the View 

>> Both Controllers and Directives have reference to the scope, but not each other.

>> $scope is acting like a GLUE between View And Model.

>> The scope is the single source of truth for all things view related.

	>> $rootScope 
	>> $scope
		Child Scopes
	
	Directives Capable To Create A Child Scopes:

		ng-repeat

		ng-controller

			Child scopes directly attached to the DOM

***Note:

	The ng-module is loaded by default when an Angular JS application started. 
	The module itself contains the essential components for an Angular JS Application to function.

Module:
-------
	You can think of a module as a container for the different parts of your app  controllers, services, filters, directives, etc.

	>> A module for each feature

	>> A module for each reusable component (especially directives and filters)
		And an application level module which depends on the above modules and contains any initialization code.

	>> The above is a suggestion. Tailor it to your needs.

--------------------------------------------------------------------------------------------
Day -2 : >> Modules
	 >> Dependency Injection
	 >> Continuation Controllers
	 >> Filters,Advanced Filters
	 >> User Defined Filters
	 >> $http Service
	 >> Angular HTML DOM Events
	 >> Sample Examples to Work Upon
--------------------------------------------------------------------------------------------
***Note:

	The ng-module is loaded by default when an Angular JS application started. The module itself contains the essential components for an Angular JS Application to function.

Module:
-------
	You can think of a module as a container for the different parts of your app  controllers, services, filters, directives, etc.

	>> A module for each feature

	>> A module for each reusable component (especially directives and filters)
		And an application level module which depends on the above modules and contains any initialization code.

	>> The above is a suggestion. Tailor it to your needs.

Module Related Info:
--------------------

>> var myApp=angular.module("myApp",[]);

	myApp.controller("ABC", fun($scope){ }
	myApp.service("xyz");
	myApp.derictive("asd");

>> myModule.js file

>> var myApp=angular.module("myApp",[]); // creating a module

	var myApp=angular.module("myApp"); // Retrival of existing module
	myApp.controller("ZZZ"",...);

	var myModule=angular.module("myModule"); // Runtime Error



Some Popular Tools:
------------------

	>> PHP Strom	
	>> Web Strom	==> Paid Versions

	>> Aptana	==> Open Source

	>> Yeoman : Has a Code Generator With this tool you can speed up your angular developement

	>> Testing And Debugging

		Jasmine
		Karma

	>> Protactor : Automated end to end angular testing tool.

	>> Angular Batarang
	   ng-inspector are chrome extensions for debugging angular applications.



Now: 

Predefined Service:
-----------------

$http service

	Ajax calls

Example:

Day-II Folder:
		displayAjaxExample.html
			>> employeeRecords.txt 


Filters:
--------


1)currency 2) uppercase 3) lowercase 4) filter 5) order by

Advanced Filters:

 1) json 2) date 3) limitTo 4) number

Examples : Day-II Folder Filter Examples


 Dependency Injection:
 ---------------------

	Dependency Injection (DI) is a software design pattern that deals with how components get hold of their dependencies.

	The Angular injector subsystem is in charge of creating components, resolving their dependencies, and providing them to other components as requested.


Creating User Defined Filters:

Example:

Day-II Folder:

	1) userDefinedFilterExample.html
		>> JS/CustomFilterModule.js
		>> JS/HelloAppModule.js 
	


-----------------------------------------------------------------------------
Day -3 : 	>> Forms and Form Validations
			>> Routing
			>> User Defined Services
			>> User Defined Directives
			>> Sample Examples to Work Upon
			>> Real Project Coding Walkthrough
-----------------------------------------------------------------------------

>> HTML DOM Directives

	1) ng-disabled	disables a given control.
	2) ng-show	shows a given control.
	3) ng-hide	hides a given control.
	4) ng-click	represents a AngularJS click event.

		etc..

	Example: Day-III Folder : htmlDOMElements.html

>> Forms and Form Validations

	Validate data

		Following can be used to track error.
		
		novalidate

		$dirty - states that value has been changed.

		$invalid - states that value entered is invalid.

		$error - states the exact error.

		$pristine - The field has not been  modified yet

		$touched

		$untouched etc..

	Example: Day-III Folder : 	1) angularFormValidationExample.html
					2) formValidationExample.html	

	Using CSS classes

		To allow styling of form as well as controls, ngModel adds these CSS classes:

		ng-valid: the model is valid

		ng-invalid: the model is invalid
	
		ng-pristine: the control hasn't been interacted with yet

		ng-dirty: the control has been interacted with

		ng-touched: the control has been blurred

		ng-untouched: the control hasn't been blurred

	Example: formAngularCSSValidation.html


>> ng-switch

>> ng-include

>> ng-if   

>> ng-init 

>> Routing

>> ng-view

	Example : 	Day-III Folder:

				RoutingExample Folder

>> User Defined Services

	>> Factory	===> 

	>> Service

	>> Provider

	Note:

		service's are singleton's instances

		module.service();
		module.factory();
	
	Example :Day-III Folder

			userDefinedServicesExample.html

				>> contactService.js

>> User Defined Directives

>> Case Study Explanation





































